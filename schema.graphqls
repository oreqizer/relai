# Relay Global Object Identification Specification - @objects
# https://facebook.github.io/relay/graphql/objectidentification.htm
interface Node {
  id: ID!
}

# Relay Cursor Connections Specification - @connections
# https://facebook.github.io/relay/graphql/connections.htm
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Relay Input Object Mutations Specification - @mutation
# https://facebook.github.io/relay/graphql/mutations.htm
# - clientMutationId is client's way of mapping responses to requests

type User {
  id: ID!
  name: String!
  todos(display: String = "all", first: Int, after: String): TodoConnection # @connections
}

type Todo {
  id: ID!
  text: String!
  complete: Boolean!
}

# @connections
type TodoConnection {
  edges: [TodoEdge!]
  pageInfo: PageInfo!
}

# @connections
type TodoEdge {
  cursor: String!
  node: Todo
}

type Query {
  user(name: String!): User
  node(id: ID!): Node # @objects
}

input CreateTodoInput {
  userId: ID! # Normally taken from JWTs or something
  text: String!
  complete: Boolean!
  clientMutationId: String! # @mutation
}

input UpdateTodoInput {
  userId: ID! # Normally taken from JWTs or something
  id: String!
  text: String!
  complete: Boolean!
  clientMutationId: String! # @mutation
}

input DeleteTodoInput {
  userId: ID! # Normally taken from JWTs or something
  id: String!
  clientMutationId: String! # @mutation
}

type TodoPayload {
  todoEdge: TodoEdge
  clientMutationId: String! # @mutation
}

type DeleteTodoPayload {
  deletedId: ID!
  clientMutationId: String! # @mutation
}

type Mutation {
  # All mutations take only 1 arg of type Object - @mutation
  createTodo(input: CreateTodoInput): TodoPayload
  updateTodo(input: UpdateTodoInput): TodoPayload
  deleteTodo(input: DeleteTodoInput): DeleteTodoPayload
}
